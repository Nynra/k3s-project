# If the chart instance should be created
enabled: true

# Project configuration
namespace:
  enabled: false
  name: k3s-test-namespace
  hooked: false
  labels: {}
  annotations: {}

# Argocd App Project
appProject:
  enabled: false
  name: k3s-test-project
  hooked: false

  # Labels and annotations to add to the project
  labels: {}
  annotations: {}

  # List of the allowed namespaces for this project
  namespaces: []
  # List of source repositories for this project
  sourceRepos: "*"
    # # Argocd Helm chart repository
    # - https://argoproj.github.io/argo-helm
  # List of the ArgoCD App Project destinations
  # By default only allows the namespace deployed in this chart, should be the same
  # namespace as argocd is deployed in.
  # destinations:
  #   - namespace: argocd
  #     server: https://kubernetes.default.svc

  # List of cluster resource whitelists for this project
  # By default only allows the creation of namespaces
  # clusterResourceWhitelist:
  #   - group: ""
  #     kind: Namespace
  #   - group: "apps"
  #     kind: Deployment
  # Or allow all cluster resources
  #   - group: "*"
  #     kind: "*"

  # List of namespace resource blacklists for this project
  # By default only blacklists ResourceQuotas, LimitRanges and NetworkPolicies
  # namespaceResourceBlacklist: []

  # monitoring:
  #   enabled: false
  #   # Warn if the project contains orphaned resources
  #   # This is useful to detect resources that are not managed by ArgoCD
  #   # and could be deleted, use with caution as it could delete resources that are not managed by ArgoCD
  #   # only give admin access to this project if you enable this
  #   warnOrphaned: false 


# Configure RBAC for project
rbac: 
  # Enable RBAC default for this project
  enabled: false

  # Labels and annotation to add to all rbac resources
  annotations: {}
  labels: {}

  # List groups to authorize on this project
  groups: []
  # # Example group ID
  # - id: mygroup_default
  #   # Example group name
  #   name: mygroup_default
  #   # Example binding namespace
  #   namespace: default
  #   # Example group role in this project
  #   role: basic-user
  # - id: mygroup_admin
  #   # Example group name
  #   name: mygroup_admin
  #   # Example of a clusterRoleBinding
  #   type: cluster
  #   # Example group role in this project
  #   role: edit
  # List users to authorize on this project
  users: []
  # # Example user ID
  # - id: myuser
  #   # Example user name
  #   name: myusername
  #   # Example of the user rolebinding namespace (default is project name)
  #   namespace: default
  #   # Example user role in this project
  #   role: basic-user
  # List serviceAccount to authorize on this project
  sa: []
  # # Example user ID
  # - id: mysa
  #   # Example user name
  #   name: mysa
  #   # Example of the serviceaccount namespace (default is project name)
  #   namespace: default
  #   # Example user role in this project
  #   role: myrole
  rolesbinding: []
  # # Example binding ID
  # - id: myrolebinding
  #   # Example binding name
  #   name: myrolebinding
  #   # Example of the rolebinding namespace (default is project name)
  #   namespace: default
  #   # Type of rolebinding. Could be cluster or local (default is local). If cluster, namespace is ignored
  #   type: local
  #   # Name of role for this rolebinding
  #   role: myrole
  #   # Type of role. Could be cluster or local (default is rolebinding type). If cluster, namespace is ignored
  #   typeRole: local
  #   # Define the list of user/group/SA associated to this binding
  #   subjects:
  #   - kind: ServiceAccount
  #     name: default
  #     namespace: "default"
  # - id: myclusterrolebinding
  #   name: myrolebinding
  #   type: cluster
  #   role: myclusterrole
  #   subjects:
  #   - kind: ServiceAccount
  #     name: default
  #     namespace: "default"
  roles: []
  # # Example role ID
  # - id: myrole
  #   # Example role name
  #   name: myrole
  #   # Example of the role namespace (default is project name)
  #   namespace: default
  #   # Type of role. Could be cluster or local (default is local). If cluster, namespace is ignored
  #   type: local
  #   # Rules for the role definition
  #   rules:
  #   - apiGroups: ["security.openshift.io"]
  #     resources: ["securitycontextconstraints"]
  #     verbs: ["use"]
  #     resourceNames: ["anyuid"]
  # - id: myclusterrole
  #   name: myrole
  #   type: cluster
  #   rules:
  #   - apiGroups: ["security.openshift.io"]
  #     resources: ["securitycontextconstraints"]
  #     verbs: ["use"]
  #     resourceNames: ["anyuid"]

# Configure NetworkPolicy for project
networkpolicy: 
  # Enable NetworkPolicy default for this project
  enabled: false

  # Labels and annotation to add to all networkpolicy resources
  annotations: {}
  labels: {}
  
  # List group to create
  rules: []
  # allow from external
  # - id: allow-from-openshift-ingress
  #   # Specifications of this policy rule
  #   spec: |
  #     ingress:
  #     - from:
  #         - namespaceSelector:
  #             matchLabels:
  #               network.openshift.io/policy-group: ingress
  #     podSelector: {}
  #     policyTypes:
  #     - Ingress
  # # allow from internal
  # - id: allow-from-same-namespace
  #   # Specifications of this policy rule
  #   spec: |
  #     podSelector: {}
  #     ingress:
  #     - from:
  #       - podSelector: {}
  # # Custom configuration
  # additionalLabels: |
  #   label: "netpol"
  # additionalAnnotations: |
  #   annotations: "netpol"

# Configure limitRange for project
limits: 
  # Enable limitRange default for this project
  enabled: false

  # Labels and annotation to add to all limitRange resources
  annotations: {}
  labels: {}

  # Specification of the limitRange ressource
  rules: |
    limits:
      - type: "Pod"
        max:
          cpu: 200m
          memory: 256Mi
      - type: "Container"
        max:
          cpu: 100m
          memory: 128Mi
  # # Custom configuration
  # additionalLabels: |
  #   label: "limit"
  # additionalAnnotations: |
  #   annotations: "limit"

# Configure quotas for project
quotas: 
  # Enable quotas default for this project
  enabled: false

  # Labels and annotation to add to all quotas
  labels: {}
  annotations: {}

  # Specification of the quotas ressource
  rules: |
    hard:
      limits.cpu: "400m"
      limits.memory: "1024Mi"
      requests.cpu: "400m"
      requests.memory: "512Mi"
      persistentvolumeclaims: "0"
      pods: "4"
      services: "2"
  # additionalLabels: |
  #   label: "quota"
  # additionalAnnotations: |
  #   annotations: "quota"

# Configure serviceAccounts for project
serviceAccounts:
  # Enable serviceAccounts for this project
  enabled: false

  # Labels and annotation to add to all serviceAccounts
  annotations: {}
  labels: {}

  # List of the credentials to record
  list: []
  # # Name of the service account (default is default)
  # - name: default
  #   # List of the imagePullSecrets to link to this SA
  #   imagePullSecrets: 
  #     # Name of the secret with registry credentials
  #     - name: startx-registrycreds-quay
  #     # Name of the namespace where the secret reside (default is same project)
  #       namespace: default-project
  # # Custom configuration
  # additionalLabels: |
  #   label: "sa"
  # additionalAnnotations: |
  #   annotations: "sa"

externalSecrets:
  enabled: false
  enableCertificates: true
  enableSecrets: true

  # Labels and annotation to add to all external secrets
  annotations: {}
  labels: {}

  # Labels and annotation to add to all certificates
  certAnnotations: {}
  certLabels: {}

  # Labels and annotation to add to all secrets
  secretAnnotations: {}
  secretLabels: {}

  # List of certificates to create
  certificates: []
  # # Example external secret with all fields
  # - name: my-external-secret
  #   namespace: k3s-test-namespace
  #   annotations: {}
  #   labels: {}
  #   remoteSecret:
  #     name: my-secret-name
  #     crtField: tls_crt
  #     keyField: tls_key
  #   secretStore:
  #     kind: SecretStore
  #     name: kubernetes-secret-store
  # # Example external secret with manditory fields only
  # - name: my-external-secret
  #   remoteSecret:
  #     name: my-secret-name
  #   secretStore:
  #     name: kubernetes-secret-store
  #  # Or
  # - name: my-external-secret
  #   remoteSecret.name: my-secret-name
  #   secretStore.name: kubernetes-secret-store

  # List of secrets to create
  secrets: []
  # # Example external secret with all fields
  # - name: my-external-secret
  #   namespace: k3s-test-namespace
  #   annotations: {}
  #   labels: {}
  #   remoteSecretName: my-secret-name
  #   fieldMappings:
  #     # The field name in the remote secret
  #     - remoteField: my_secret_field
  #       # The secret key in the Kubernetes secret
  #       secretKey: my_secret_key
  #   secretStore:
  #     kind: SecretStore
  #     name: kubernetes-secret-store
  # # Example external secret with manditory fields only
  # - name: my-external-secret
  #   remoteSecretName: my-secret-name
  #   fieldMappings:
  #     - remoteField: my_secret_field
  #       secretKey: my_secret_key
  #   secretStore.name: kubernetes-secret-store